database : lwos
database connection name : lwosdb
password : qaium29


CREATE TABLE userinfo
(
user_id int not null,
user_role varchar2 (20),
full_name varchar2 (20) not null,
user_name varchar2 (20) not null,
email varchar2 (20) not null,
mobile VARCHAR2(20) not null,
dob date not null ,
gender varchar2 (10) not null,
address varchar2(50) not null,
country varchar2 (30) not null ,
city varchar2(20),
pass varchar2(20) not null,
pro_pic VARCHAR2(500),
CONSTRAINT userinfo_pk primary key(user_id)
)

create SEQUENCE user_id
MINVALUE 1
START WITH 1
INCREMENT BY 1 ;



CREATE TABLE post_tab
(
post_id int not null,
post varchar2 (500),
post_type varchar2 (20),
CATEGORIES varchar2 (20),
post_headline varchar2 (1000),
date_time varchar2 (100),
user_id int,
CONSTRAINT data_tab_pk primary key (post_id),
CONSTRAINT fk_user_id foreign key (user_id)
references userinfo(user_id)
)


CREATE TABLE comment_tab
(
comment_id int not null,
comment_content varchar2 (500),
comment_post_type varchar2 (20),
user_id int,
post_id int,
time_date varchar2 (100),
CONSTRAINT comment_tab_pk primary key (comment_id)
)

ALTER TABLE comment_tab
ADD CONSTRAINT post_tab
foreign key (post_id)
references post_tab(post_id)

ALTER TABLE comment_tab
ADD CONSTRAINT userinfo
foreign key (user_id)
references userinfo(user_id)


create SEQUENCE post_id
MINVALUE 1
START WITH 1
INCREMENT BY 1 
CACHE 10 ;

create table feedback
(
serial_no int not null,
agree_notagree varchar2 (20),
post_id int,
user_id int ,
CONSTRAINT feedback_pk primary key (serial_no),
CONSTRAINT fk_post_tab foreign key (post_id)
references post_tab (post_id)
)


create SEQUENCE serial_no
MINVALUE 1
START WITH 1
INCREMENT BY 1 
CACHE 10 ;


ALTER TABLE feedback
ADD CONSTRAINT fk_userinfo
foreign key (user_id)
references userinfo(user_id)



CREATE OR REPLACE TRIGGER timeupdate BEFORE INSERT ON comment_tab 
FOR EACH ROW
BEGIN
INSERT INTO comment_tab(TIME_DATE) 
VALUES (SYSDATE,'yy-mm-dd hh-ms-ss');
END;


create or replace TRIGGER timeupdate AFTER  INSERT ON COMMENT_TAB 
FOR EACH ROW
DECLARE
VA VARCHAR2 (60);
BEGIN
VA:=TO_CHAR(SYSDATE,'yy-mm-dd:hh:mm');
UPDATE COMMENT_TAB SET TIME_DATE= VA ;
END;


create or replace TRIGGER timeupdate AFTER  INSERT ON COMMENT_TAB 
FOR EACH ROW
DECLARE
VA VARCHAR2 (60);
BEGIN
VA:=TO_CHAR(SYSDATE,'yy-mm-dd:hh:mm');
UPDATE COMMENT_TAB SET TIME_DATE= VA ;
END;



UPDATE post_tab
SET post = NULL;
tar por
ALTER TABLE post_tab
MODIFY post LONG;



ALTER TABLE LOG_TAB
ADD CONSTRAINT FK_LGO_TAB_C
foreign key (LOG_COMMENT_ID)
references COMMENT_TAB(COMMENT_ID);




Trigger for notification
==============================
create or replace TRIGGER TRG_send_notification
  BEFORE INSERT ON POST_TAB
  FOR EACH ROW

  begin
  begin
  insert into notification (NOTIFICATION_ID,FOLLOWER_ID,FOLLOWING_ID,NOTIFICATION_MES,IS_NEW_FLAG,TIME_DATE)
  select seq_notification.nextval,a.FOLLOWER_USER_ID,a.FOLLOWING_USER_ID, :new.post_headline,1, to_char(sysdate,'dd/mm/yyyy HH:MI:ss')
  from follow a ,userinfo c
  where c.user_id=a.following_user_id
  and a.FOLLOWING_USER_ID = :new.user_id ;
  exception
  when others then
dbms_output.put_line(sqlerrm) ;
  null ;
  end ;
  end ;

import export dmp
================================
export :

exp lwos/qaium29 file=f:/db_backup/lwosdb_export_backup_27122016.dmp owner=lwos ;

import: 

exp lwos/qaium29 file=f:/db_backup/lwosdb_export_backup_27122016.dmp owner=lwos ;




Audit trigger
=====================


create or replace TRIGGEr TRG_userinfo_audit
   AFTER DELETE OR UPDATE
   ON userinfo
   FOR EACH ROW
DECLARE
   p_IP_ADDRESS      VARCHAR2 (200);
   p_OS_USER         VARCHAR2 (200);
   p_TERMINAL_NAME   VARCHAR2 (200);
   p_HOST_NAME       VARCHAR2 (200);
   p_USER_NAME       VARCHAR2 (200);
   p_ORA_SYSEVENT    VARCHAR2 (200);
BEGIN
   BEGIN
      SELECT ora_sysevent,
             USER,
             SYS_CONTEXT ('userenv', 'ip_address') ip_add,
             SYS_CONTEXT ('USERENV', 'OS_USER') os_user,
             SYS_CONTEXT ('USERENV', 'TERMINAL') ter_name,
             SYS_CONTEXT ('USERENV', 'HOST') host_name
        INTO p_ORA_SYSEVENT,
             p_USER_NAME,
             p_IP_ADDRESS,
             p_OS_USER,
             p_TERMINAL_NAME,
             p_HOST_NAME
        FROM DUAL;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;

   BEGIN
      IF UPDATING
      THEN
         INSERT INTO userinfo_audit (
USER_ID,
USER_ROLE,
FULL_NAME,
USER_NAME,
EMAIL,
MOBILE,
DOB,
GENDER,
ADDRESS,
COUNTRY,
CITY,
PASS,
PRO_PIC,
POST_AMOUNT,
       ORIGINAL_ROW_ID,
       ACTION_TYPE,
       ACTION_DATE,
       ACTION_BY,
       IP_ADDRESS,
       OS_USER,
       TERMINAL_NAME,
       HOST_NAME,
       USER_NAME_aud,
       ORA_SYSEVENT)
              VALUES (
:old.USER_ID,
:old.USER_ROLE,
:old.FULL_NAME,
:old.USER_NAME,
:old.EMAIL,
:old.MOBILE,
:old.DOB,
:old.GENDER,
:old.ADDRESS,
:old.COUNTRY,
:old.CITY,
:old.PASS,
:old.PRO_PIC,
:old.POST_AMOUNT,
      :old.ROWID,
      'UPDATED',
      SYSDATE,
      :new.USER_ID,
      p_IP_ADDRESS,
      p_OS_USER,
      p_TERMINAL_NAME,
      p_HOST_NAME,
      p_USER_NAME,
      p_ORA_SYSEVENT);
      -- Trigger this when Deleting a Record
      -- Insert data into Audit Table with Action Deleted
      ELSIF DELETING
      THEN
          INSERT INTO userinfo_audit (
USER_ID,
USER_ROLE,
FULL_NAME,
USER_NAME,
EMAIL,
MOBILE,
DOB,
GENDER,
ADDRESS,
COUNTRY,
CITY,
PASS,
PRO_PIC,
POST_AMOUNT,
     ORIGINAL_ROW_ID,
     ACTION_TYPE,
     ACTION_DATE,
     ACTION_BY,
     IP_ADDRESS,
     OS_USER,
     TERMINAL_NAME,
     HOST_NAME,
     USER_NAME_aud,
     ORA_SYSEVENT)
 VALUES (
:old.USER_ID,
:old.USER_ROLE,
:old.FULL_NAME,
:old.USER_NAME,
:old.EMAIL,
:old.MOBILE,
:old.DOB,
:old.GENDER,
:old.ADDRESS,
:old.COUNTRY,
:old.CITY,
:old.PASS,
:old.PRO_PIC,
:old.POST_AMOUNT,
      :old.ROWID,
      'DELETE',
      SYSDATE,
      :old.USER_ID,
      p_IP_ADDRESS,
      p_OS_USER,
      p_TERMINAL_NAME,
      p_HOST_NAME,
      p_USER_NAME,
      p_ORA_SYSEVENT);
      
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;
END;

===========